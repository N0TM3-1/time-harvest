go.property("speed", 200)        -- Max movement speed
go.property("acceleration", 600) -- Rate of acceleration
go.property("friction", 500)     -- Rate of deceleration

local velocity = vmath.vector3(0, 0, 0)
local input_states = { right = false, left = false, up = false, down = false }
local input_dir = vmath.vector3(0, 0, 0)

local pos_gui = {}
local move = {}



local function update_input()
	input_dir.x = (input_states.right and 1 or 0) - (input_states.left and 1 or 0)
	input_dir.y = (input_states.up and 1 or 0) - (input_states.down and 1 or 0)
end
function move.x(self, dt)
	-- Apply acceleration on key press
	if input_dir.x ~= 0 then
		velocity.x = velocity.x + input_dir.x * self.acceleration * dt
	end

	-- Apply friction when no input is given
	if velocity.x > 0 then
		velocity.x = math.max(velocity.x - self.friction * dt, 0)
	end

	if velocity.x < 0 then
		velocity.x = math.min(velocity.x + self.friction * dt, 0)
	end
end

function move.y(self, dt)
	-- Apply acceleration on key press
	if input_dir.y ~= 0 then
		velocity.y = velocity.y + input_dir.y * self.acceleration * dt
	end

	-- Apply friction when no input is given
	if velocity.y > 0 then
		velocity.y = math.max(velocity.y - self.friction * dt, 0)
	end

	if velocity.y < 0 then
		velocity.y = math.min(velocity.y + self.friction * dt, 0)
	end
end

function move.limit(self, dt)
	-- Limit speed
	local speed = vmath.length(velocity)
	if speed > self.speed then
		velocity = vmath.normalize(velocity) * self.speed
	end
end

function move.apply(self, dt)
	-- Apply movement
	local pos = go.get_position()
	pos = pos + velocity * dt
	go.set_position(pos)
end

function init(self)
	msg.post(".", "acquire_input_focus")

	pos_gui.x = go.get_position().x
	pos_gui.y = go.get_position().y
	msg.post("/gui#game", "position", pos_gui)
end

function update(self, dt)
	update_input()
	move.x(self, dt)
	move.y(self, dt)
	move.limit(self, dt)
	move.apply(self, dt)
	-- Send position data to GUI
	pos_gui.x = math.floor(go.get_position().x)
	pos_gui.y = math.floor(go.get_position().y)
	msg.post("/gui#game", "position", pos_gui)
	-- Send speed to GUI
	local speed = math.floor(math.sqrt((velocity.x*velocity.x)+(velocity.y*velocity.y)))
	msg.post("/gui#game", "speed", {speed})
end

local function update_key_press(var_table, key_name, action)
	if action.pressed then
		var_table[key_name] = true
	elseif action.released then
		var_table[key_name] = false
	end
end

function on_input(self, action_id, action)
	-- Set input state to true when the key is pressed
	if action_id == hash("d") then
		update_key_press(input_states, "right", action)
	elseif action_id == hash("a") then
		update_key_press(input_states, "left", action)
	elseif action_id == hash("w") then
		update_key_press(input_states, "up", action)
	elseif action_id == hash("s") then
		update_key_press(input_states, "down", action)
	end
end
