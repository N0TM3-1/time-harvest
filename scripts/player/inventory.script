local persist = require 'persist.persist'

local item = {}
local select = 1
local select_id = 0
local urls = {}

local function broadcast()
    for k, v in pairs(urls) do
        msg.post(v, "slot", { select })
        -- print(v)
    end
    select_id = item[select].id                 -- Get the ID of the selected item
    for k, v in pairs(urls) do
        msg.post(v, "select_id", { select_id }) -- Send the selected item id
    end
    for k, v in pairs(urls) do
        msg.post(v, "item", item) -- Send item table
    end
end

local function select_slot(action_id)
    if action_id == hash("1") then
        select = 1
    end
    if action_id == hash("2") then
        select = 2
    end
    if action_id == hash("3") then
        select = 3
    end
    if action_id == hash("4") then
        select = 4
    end
    if action_id == hash("5") then
        select = 5
    end
    if action_id == hash("6") then
        select = 6
    end
    if action_id == hash("7") then
        select = 7
    end
    if action_id == hash("8") then
        select = 8
    end
    if action_id == hash("9") then
        select = 9
    end
end

local function shift_inv(inventory)
    for i = 2, #inventory do
        if inventory[i - 1].id == 0 then
            inventory[i - 1] = inventory[i]    -- Move item up
            inventory[i] = { id = 0, num = 0 } -- Clear old slot
        end
    end
end

local function clear_table(table)
    for k, v in pairs(table) do
        v = nil
    end
end

function init(self)
    msg.post(".", "acquire_input_focus")
    clear_table(urls)
    if not persist.exists("inventory") then
        for i = 1, 9 do
            item[i] = {}
            item[i].id = 0
            item[i].num = 0
        end
        item[1].id = 1
        item[1].num = 16
        persist.create("inventory", item, false)
    else
        item = persist.load("inventory")
    end
end

function on_input(self, action_id, action)
    select_slot(action_id)
end

function on_message(self, message_id, message, sender)
    if message_id == hash("require") then
        if #message>0 then
            if type(message[#message] == "userdata") then
                print(#message, message[#message])
                table.insert(urls, message[#message])
            else
                table.insert(urls, sender)
            end
        else
            table.insert(urls, sender)
        end
    end
    if message_id == hash("remove") then
        if message[2] == nil then
            for k, v in pairs(item) do
                if v.id == message[1] then
                    v.num = v.num - 1
                    break
                end
            end
        else
            for k, v in pairs(item) do
                if v.id == message[1] then
                    v.num = v.num - message[2]
                    break
                end
            end
        end
    end
    if message_id == hash("add") then
        if message[2] == nil then
            for k, v in pairs(item) do
                if v.id == 0 or v.id == message[1] then
                    v.id = message[1]
                    v.num = v.num + 1
                    break
                end
            end
        else
            for k, v in pairs(item) do
                if v.id == 0 or v.id == message[1] then
                    v.id = message[1]
                    v.num = v.num + message[2]
                    break
                end
            end
        end
    end
    if message_id == hash("get") then
        local count = 0
        for k, v in pairs(item) do
            if v.id == message[1] then
                count = count + v.num
            end
        end
        msg.post(sender, "count_res", { count })
    end
    persist.create("inventory", item, true) --IMPORTANT: Possible problems in the future
end

function update(self, dt)
    for k, v in pairs(item) do
        if v.num == 0 then
            v.id = 0
        end
    end
    broadcast()
    shift_inv(item)
end

function final(self)
    persist.create("inventory", item, true) --IMPORTANT: Possible problems in the future
end
